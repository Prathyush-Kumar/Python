-- Assuming you have tables like Customers, Products, Orders, and OrderItems.

-- 11. Display the products for which more than 3 quantity are orders and sort the result on the sum of quantity ordered.
SELECT p.ProductName, SUM(oi.Quantity) AS TotalQuantity
FROM Products p
JOIN OrderItems oi ON p.ProductID = oi.ProductID
GROUP BY p.ProductID, p.ProductName
HAVING SUM(oi.Quantity) > 3
ORDER BY TotalQuantity;

-- 12. Display the details of the customer who ordered the product whose price is the maximum among all the products.
SELECT c.*
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID
WHERE p.Price = (SELECT MAX(Price) FROM Products);

-- 13. Find out the details of customer who has not yet placed an order.
SELECT c.*
FROM Customers c
WHERE c.CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

-- 14. Find out the details of products which are not ordered by any customer.
SELECT p.*
FROM Products p
WHERE p.ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderItems);

-- 15. Find out the details of customer who placed order for office chair.
SELECT c.*
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID
WHERE p.ProductName = 'Office Chair';

-- 16. Give a 10% increase to all the product price and display the column with a name updated price and sort the table with that column.
SELECT ProductName, Price, Price * 1.10 AS UpdatedPrice
FROM Products
ORDER BY UpdatedPrice;

-- 17. Find out the total no of orders placed by each customer, display the customer who have placed more than 3 orders exclude customer 1 from the result.
SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.CustomerID != 1
GROUP BY c.CustomerID
HAVING COUNT(o.OrderID) > 3;

-- 18. Find the no. of orders placed by the customer belonging to New York city.
SELECT COUNT(o.OrderID) AS TotalOrders
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.City = 'New York';

-- 19. Find the product which has sold the maximum.
SELECT p.ProductName, SUM(oi.Quantity) AS TotalQuantitySold
FROM Products p
JOIN OrderItems oi ON p.ProductID = oi.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 1;

-- 20. Find the products whose price is greater than the average price of chair and table.
SELECT p.*
FROM Products p
WHERE p.Price > (
    SELECT AVG(Price)
    FROM Products
    WHERE ProductName IN ('Chair', 'Table')
);
